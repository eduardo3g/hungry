service: hungry

frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs12.x
  region: eu-west-1
  environment:
    STAGE: ${self:custom.stage}
    REST_API_URL:
      Fn::Join:
        - ''
        - - https://
          - !Ref ApiGatewayRestApi
          - .execute-api.${self:provider.region}.amazonaws.com/${self:provider.stage}
    SERVICE_NAME: ${self:service}
  eventBridge:
    useCloudFormation: true
  iamRoleStatements:
    - Effect: Allow
      Action: dynamodb:scan
      Resource: !GetAtt RestaurantsTable.Arn
    - Effect: Allow
      Action: execute-api:Invoke
      Resource: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/${self:provider.stage}/GET/restaurants
    - Effect: Allow
      Action: ssm:GetParameters*
      Resource:
        - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${self:service}/${self:custom.stage}/get-restaurants/config
        - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${self:service}/${self:custom.stage}/search-restaurants/config
        - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${self:service}/${self:custom.stage}/search-restaurants/secretString
    - Effect: Allow
      Action: kms:Decrypt
      Resource: ${ssm:/${self:custom.stage}/kmsArn}
    - Effect: Allow
      Action: events:PutEvents
      Resource: !GetAtt EventBus.Arn
    - Effect: Allow
      Action: sns:Publish
      Resource: !Ref RestaurantNotificationTopic

plugins:
  - serverless-export-env

custom:
  stage: ${opt:stage, self:provider.stage}
  export-env:
    overwrite: true

functions:
  get-index:
    handler: src/functions/get-index.handler
    environment:
      RESTAURANTS_API:
        Fn::Join:
          - ''
          - - https://
            - !Ref ApiGatewayRestApi
            - .execute-api.${self:provider.region}.amazonaws.com/${self:provider.stage}/restaurants
      ORDERS_API:
        Fn::Join:
          - ''
          - - https://
            - !Ref ApiGatewayRestApi
            - .execute-api.${self:provider.region}.amazonaws.com/${self:provider.stage}/orders
      COGNITO_USER_POOL_ID: !Ref CognitoUserPool
      COGNITO_CLIENT_ID: !Ref WebCognitoUserPoolClient
      COGNITO_SERVER_CLIENT_ID: !Ref ServerCognitoUserPoolClient
    events:
      - http:
          path: /
          method: get
  get-restaurants:
    handler: src/functions/get-restaurants.handler
    events:
      - http:
          path: /restaurants
          method: get
          authorizer: aws_iam
    environment:
      RESTAURANTS_TABLE: !Ref RestaurantsTable
  search-restaurants:
    handler: src/functions/search-restaurants.handler
    events:
      - http:
          path: /restaurants/search
          method: post
          authorizer:
            name: CognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn: !GetAtt CognitoUserPool.Arn
    environment:
      RESTAURANTS_TABLE: !Ref RestaurantsTable
  place-order:
    handler: src/functions/place-order.handler
    events:
      - http:
          path: /orders
          method: post
          authorizer:
            name: CognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn: !GetAtt CognitoUserPool.Arn
    environment:
      BUS_NAME: !Ref EventBus
  notify-restaurant:
    handler: src/functions/notify-restaurant.handler
    events:
      - eventBridge:
          eventBus: !Ref EventBus
          pattern:
            source:
              - hungry
            detail-type:
              - order_placed
    environment:
      BUS_NAME: !Ref EventBus
      RESTAURANT_NOTIFICATION_TOPIC: !Ref RestaurantNotificationTopic

resources:
  Conditions:
    IsE2eTest:
      Fn::Equals:
        - ${self:custom.stage}
        - dev
  Resources:
    RestaurantsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: name
            AttributeType: S
        KeySchema:
          - AttributeName: name
            KeyType: HASH
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:custom.stage}-${self:service}-user-pool
        AliasAttributes:
          - email
        UsernameConfiguration:
          CaseSensitive: false
        AutoVerifiedAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: true
            RequireNumbers: true
            RequireUppercase: true
            RequireSymbols: true
        Schema:
          - AttributeDataType: String
            Mutable: true
            Name: given_name
            Required: true
            StringAttributeConstraints:
              MinLength: '1'
          - AttributeDataType: String
            Mutable: true
            Name: family_name
            Required: true
            StringAttributeConstraints:
              MinLength: '1'
          - AttributeDataType: String
            Mutable: true
            Name: email
            Required: true
            StringAttributeConstraints:
              MinLength: '1'
    WebCognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:service}-web
        UserPoolId: !Ref CognitoUserPool
        ExplicitAuthFlows:
          - ALLOW_USER_SRP_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        PreventUserExistenceErrors: ENABLED
    ServerCognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:service}-server
        UserPoolId: !Ref CognitoUserPool
        ExplicitAuthFlows:
          - ALLOW_ADMIN_USER_PASSWORD_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        PreventUserExistenceErrors: ENABLED
    ServiceUrlParameter:
      Type: AWS::SSM::Parameter
      Properties:
        Type: String
        Name: /${self:service}/${self:custom.stage}/serviceUrl
        Value:
          Fn::Join:
            - ''
            - - https://
              - !Ref ApiGatewayRestApi
              - .execute-api.${self:provider.region}.amazonaws.com/${self:custom.stage}
    EventBus:
      Type: AWS::Events::EventBus
      Properties:
        Name: order_events_${self:custom.stage}
    RestaurantNotificationTopic:
      Type: AWS::SNS::Topic
    E2eTestQueue:
      Type: AWS::SQS::Queue
      Condition: IsE2eTest
      Properties:
        MessageRetentionPeriod: 60 # seconds
        VisibilityTimeout: 1 # seconds
    E2eTestQueuePolicy:
      Type: AWS::SQS::QueuePolicy
      Condition: IsE2eTest
      Properties:
        Queues:
          - !Ref E2eTestQueue
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            Effect: Allow
            Principal: '*'
            Action: SQS:SendMessage
            Resource: !GetAtt E2eTestQueue.Arn
            Condition:
              ArnEquals:
                aws:SourceArn: !Ref RestaurantNotificationTopic
    E2eTestSnsSubscription:
      Type: AWS::SNS::Subscription
      Condition: IsE2eTest
      Properties:
        Protocol: sqs
        Endpoint: !GetAtt E2eTestQueue.Arn
        RawMessageDelivery: false # adds complete information about the message, not just the content
        Region: !Ref AWS::Region
        TopicArn: !Ref RestaurantNotificationTopic

  Outputs:
    RestaurantsTableName:
      Value: !Ref RestaurantsTable
    CognitoUserPoolId:
      Value: !Ref CognitoUserPool

    CognitoUserPoolArn:
      Value: !GetAtt CognitoUserPool.Arn

    CognitoUserPoolWebClientId:
      Value: !Ref WebCognitoUserPoolClient

    CognitoUserPoolServerClientId:
      Value: !Ref ServerCognitoUserPoolClient

    EventBusName:
      Value: !Ref EventBus

    RestaurantNotificationTopicName:
      Value: !GetAtt RestaurantNotificationTopic.TopicName

    RestaurantNotificationTopicArn:
      Value: !Ref RestaurantNotificationTopic

    E2eTestQueueUrl:
      Condition: IsE2eTest
      Value: !Ref E2eTestQueue
